datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
    id          String  @id @default(uuid())
    userId      String
    title       String  @db.Text
    description String? @db.Text
    imageUrl    String? @db.Text
    price       Float?
    isPublished Boolean @default(false)

    categoryId String?
    category   Category? @relation(fields: [categoryId], references: [id])

    chapters    Chapter[]
    attachments Attachment[]
    purchases   Purchase[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([categoryId])
    @@fulltext([title])
}

model Category {
    id      String   @id @default(uuid())
    name    String   @unique
    courses Course[]
}

model Attachment {
    id   String @id @default(uuid())
    name String
    url  String @db.Text

    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([courseId])
}

model Chapter {
    id          String  @id @default(uuid())
    title       String
    description String? @db.Text
    videoUrl    String? @db.Text
    position    Int
    isPublished Boolean @default(false)
    isFree      Boolean @default(false)

    muxData MuxData?

    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    userProgress UserProgress[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([courseId])
}

model MuxData {
    id         String  @id @default(uuid())
    assetId    String
    playbackId String?

    chapterId String  @unique
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id     String @id @default(uuid())
    userId String

    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    isCompleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, chapterId])
    @@index([chapterId])
}

model Purchase {
    id     String @id @default(uuid())
    userId String

    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@unique([userId, courseId])
    @@index([courseId])
}

model StripeCustomer {
    id               String @id @default(uuid())
    userId           String @unique
    stripeCustomerId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// AI SCHEMA

model User {
    id    String @id @unique //matches kinde user id
    email String @unique

    File    File[]
    Message Message[]

    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
    PENDING
    PROCESSING
    FAILED
    SUCCESS
}

model File {
    id   String @id @default(cuid())
    name String

    uploadStatus UploadStatus @default(PENDING)

    url      String
    key      String
    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?

    @@index([userId])
}

model Message {
    id   String @id @default(cuid())
    text String @db.Text()

    isUserMessage Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    File      File?    @relation(fields: [fileId], references: [id])
    fileId    String?

    @@index([userId])
    @@index([fileId])
}
